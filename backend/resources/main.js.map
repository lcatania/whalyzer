{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.config.ts","./src/app/models/Container.ts","./src/app/pipes/state-to-color.pipe.ts","./src/main.ts"],"sourcesContent":["import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { NgFor, NgIf } from '@angular/common';\nimport { DragScrollModule } from 'ngx-drag-scroll';\nimport { Tile } from './models/Tile';\nimport { Container } from './models/Container';\nimport { ContainerStateToColorPipe } from './pipes/state-to-color.pipe';\nimport { Network } from './models/Network';\n\nconst CONTAINER_IMAGE = '../assets/container.png'\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [NgIf, NgFor, DragScrollModule, ContainerStateToColorPipe],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  ROWS = 30;\n  COLS = 30;\n\n  baseTileLayer: Array<Array<Tile>> = [];\n  midTileLayer: Array<Array<Container | undefined>> = [];\n  currentContainerCoords: { [key: string]: { ROW: number, COL: number } } = {};\n  selectedContainer!: Container\n\n  @ViewChild('map', { static: false }) map!: ElementRef<HTMLDivElement>;\n\n  isCreateContainerModalVisible: boolean = false;\n\n  async ngOnInit() {\n    for (let xIndex = 0; xIndex <= this.ROWS; xIndex++) {\n      this.baseTileLayer.push([]);\n      this.midTileLayer.push([]);\n      for (let yIndex = 0; yIndex <= this.COLS; yIndex++) {\n        this.baseTileLayer[xIndex].push({\n        })\n        this.midTileLayer[xIndex].push(undefined)\n      }\n    }\n    await Neutralino.events.on(\"CONTAINER_LIST\", (data: CustomEvent<Container[]>) => {\n      //Generate Containers in random places in boundaries\n      Object.values(this.currentContainerCoords).forEach(coords => {\n        this.midTileLayer[coords.ROW][coords.COL] = undefined\n      })\n      this.currentContainerCoords = {};\n      if (data.detail.length === 0)\n        return;\n      this.createContainersInBoundaries(data.detail);\n    })\n    await Neutralino.extensions.dispatch(\"js.neutralino.sampleextension\", \"GET_CONTAINER_LIST\", undefined)\n    await Neutralino.events.on(\"NEW_CONTAINER\", (data: CustomEvent<Container>) => {\n      //Generate Containers in random places in boundaries\n      if (!data.detail)\n        return;\n      this.createContainersInBoundaries([data.detail]);\n    })\n    await Neutralino.events.on(\"CONTAINER_UPDATE\", (data: CustomEvent<Container>) => {\n      const targetContainerCoords = this.currentContainerCoords[data.detail.id];\n      if (!targetContainerCoords)\n        return;\n      let targetContainer = this.midTileLayer[targetContainerCoords.ROW][targetContainerCoords.COL];\n      if (!targetContainer)\n        return;\n      targetContainer.state = data.detail.state;\n      targetContainer.status = data.detail.status;\n    })\n    await Neutralino.events.on(\"REMOVE_CONTAINER\", (data: CustomEvent<string>) => {\n      const containerCoords = this.currentContainerCoords[data.detail];\n      if (!containerCoords)\n        return;\n      this.midTileLayer[containerCoords.ROW][containerCoords.COL] = undefined\n      delete this.currentContainerCoords[data.detail]\n    })\n    await Neutralino.events.on(\"NETWORK_LIST\", (data: CustomEvent<Network[]>) => {\n    })\n\n  }\n\n  addContainer(row: number, col: number, container: Container) {\n    let entity: Container;\n    entity = {\n      ...container,\n      icon: CONTAINER_IMAGE,\n    } as Container;\n    this.midTileLayer[row][col] = entity;\n  }\n\n  dismissModal() {\n    this.isCreateContainerModalVisible = false;\n  }\n\n  getVisibleTiles(): { firstVisibleRowIndex: number, lastVisibleRowIndex: number, firstVisibleColIndex: number, lastVisibleColIndex: number } | undefined {\n    const mapBoundings = this.map.nativeElement.getBoundingClientRect();\n    let firstVisibleRow = undefined;\n    let firstVisibleRowIndex = undefined;\n    let lastVisibleRowIndex = undefined;\n\n    let firstVisibleColIndex = undefined;\n    let lastVisibleColIndex = undefined;\n\n    for (let index = 0; index < this.map.nativeElement.children.length; index++) {\n      const row = this.map.nativeElement.children[index];\n      const rowBoudings = row.getBoundingClientRect();\n\n      // If the child is in the viewport\n      if (rowBoudings.top >= -15 && rowBoudings.bottom <= ((mapBoundings.bottom < 0 ? (mapBoundings.height + mapBoundings.bottom) : mapBoundings.bottom)) + 15) {\n        if (!firstVisibleRow) {\n          firstVisibleRow = row;\n          firstVisibleRowIndex = index;\n        }\n      }\n      // If the child is outside the viewport \n      else {\n        if (!firstVisibleRow)\n          continue;\n        if (!lastVisibleRowIndex) {\n          lastVisibleRowIndex = index - 1;\n          break;\n        }\n\n      }\n    }\n\n    if (!firstVisibleRow)\n      return undefined;\n\n    for (let index = 0; index < firstVisibleRow.children.length; index++) {\n      const tile = firstVisibleRow.children[index];\n      const tileBoudings = tile.getBoundingClientRect();\n      if (tileBoudings.left >= 0 && tileBoudings.right <= (mapBoundings.right < 0 ? (mapBoundings.width + mapBoundings.left) : mapBoundings.width - 16)) {\n        if (firstVisibleColIndex === undefined)\n          firstVisibleColIndex = index;\n      }\n      else {\n        if (firstVisibleColIndex === undefined)\n          continue;\n        if (!lastVisibleColIndex)\n          lastVisibleColIndex = index;\n        break;\n      }\n    }\n\n    return { firstVisibleColIndex: firstVisibleColIndex ?? 0, firstVisibleRowIndex: firstVisibleRowIndex ?? 0, lastVisibleColIndex: lastVisibleColIndex ?? 0, lastVisibleRowIndex: lastVisibleRowIndex ?? 0 }\n  }\n\n  createContainersInBoundaries(services: Container[]): { row: number, col: number }[] {\n    let result: { row: number, col: number }[] = []\n\n    const visibleTileBoundaries = this.getVisibleTiles();\n\n    if (!visibleTileBoundaries)\n      return [];\n\n    const centerRow = Math.floor((visibleTileBoundaries.firstVisibleRowIndex ?? 0) + ((visibleTileBoundaries.lastVisibleRowIndex ?? 0) / 2));\n    const centerCol = Math.floor((visibleTileBoundaries.firstVisibleColIndex ?? 0) + ((visibleTileBoundaries.lastVisibleColIndex ?? 0) / 2));\n    let radius = 3;\n    let maxRow = centerRow + radius;\n    let maxCol = centerCol + radius;\n    let minRow = centerRow - radius;\n    let minCol = centerCol - radius;\n\n    let randomRow: number = 0;\n    let randomCol: number = 0;\n\n    services.forEach((value) => {\n      do {\n        randomRow = Math.floor(Math.random() * (maxRow - minRow + 1)) + minRow;\n        randomCol = Math.floor(Math.random() * (maxCol - minCol + 1)) + minCol;\n      } while (this.midTileLayer[randomRow][randomCol]);\n      this.addContainer(randomRow, randomCol, value)\n      this.currentContainerCoords[value.id] = { ROW: randomRow, COL: randomCol };\n      ++radius;\n    });\n    return result;\n  }\n\n  entitySelected(event: MouseEvent, rowIndex: number, colIndex: number) {\n    const entity = this.midTileLayer[rowIndex][colIndex];\n    if (this.isContainer(entity)) {\n      this.isCreateContainerModalVisible = true\n      this.selectedContainer = entity;\n    }\n    event.stopPropagation();\n  }\n\n  isContainer(entity: Container | undefined): entity is Container {\n    if (!entity || !(\"image\" in entity))\n      return false;\n    return true;\n  }\n\n  async baseSelected() {\n    console.log(\"BASE\");\n  }\n\n}","<drag-scroll>\n  <div #map class=\"w-screen h-screen flex flex-col overflow-visible\">\n    @for (row of baseTileLayer;let rowIndex = $index; track rowIndex) {\n    <div class=\"w-full h-full flex\">\n      @for (cell of row;let colIndex = $index; track colIndex ) {\n      <div (click)=\"baseSelected()\"\n        class=\" aspect-square w-[64px] h-[64px] flex items-center justify-center text-black hover:bg-green-200 bg-green-300  relative\">\n        @if (midTileLayer[rowIndex][colIndex]) {\n        <div (click)=\"entitySelected($event, rowIndex, colIndex)\"\n          [style.background-image]=\"'url(' + midTileLayer[rowIndex][colIndex]?.icon + ')'\"\n          class=\"group aspect-square w-[64px] h-[64px] flex items-center justify-center text-white absolute z-10\">\n          <div\n            [class]=\"'pixel-border absolute top-0 right-2 w-[10px] h-[10px] ' + (midTileLayer[rowIndex][colIndex]?.state | stateToColor)\">\n          </div>\n          <div\n            class=\"group-hover:opacity-100 pixel-border bg-gray-100 p-1 min-w-[100px] flex justify-center text-zinc-900 opacity-0 transition-opacity absolute -top-10\">\n            {{midTileLayer[rowIndex][colIndex]?.name}}\n          </div>\n        </div>\n        }\n      </div>\n      }\n    </div>\n    }\n    <!--<div class=\"w-[100px] h-[2px] top-[200px] bg-black absolute\"></div>-->\n  </div>\n</drag-scroll>\n\n@if (isCreateContainerModalVisible) {\n<div class=\"pixel-border absolute top-0 left-0 w-2/4 h-full bg-sky-200 z-30\">\n  <div class=\"flex flex-col h-full\">\n    <div class=\" h-16 w-full flex justify-between items-center px-6\">\n      <div class=\"flex gap-x-5 items-center\">\n        <div [class]=\"'pixel-border w-[10px] h-[10px] ' + (selectedContainer.state | stateToColor)\">\n        </div>\n        <span class=\"text-2xl\">{{selectedContainer.state}} ({{selectedContainer.status}})</span>\n      </div>\n      <button class=\"base-button w-8 h-8\" (click)=\"dismissModal()\">X</button>\n    </div>\n    <div class=\"flex-1 flex-col flex gap-y-3 px-5 \">\n      <span class=\"text-3xl\">Name:</span>\n      <input class=\"pixel-border base-input\" placeholder=\"Awesome Container\" readonly\n        [value]=\"selectedContainer.name\" />\n      <span class=\"text-3xl\">Image:</span>\n      <input class=\"pixel-border base-input\" placeholder=\"Awesome Container\" readonly\n        [value]=\"selectedContainer.image\" />\n      <span class=\"text-3xl\">Ports:</span>\n      @for (port of selectedContainer.ports; track $index) {\n      <span>{{port.privatePort}} : {{port.publicPort}}</span>\n      }\n      @empty {\n      <span class=\"text-2xl\">No ports exposed :(</span>\n      }\n      <span class=\"text-3xl\">Mounts:</span>\n      @for (mount of selectedContainer.mounts; track $index) {\n      <span class=\"text-2xl\">{{mount.destination}} : {{mount.source}}</span>\n      }\n      @empty {\n      <span>No mounts :(</span>\n      }\n    </div>\n\n    <div class=\"flex justify-end items-center gap-x-8 pe-6 h-20 w-full\">\n      <!-- <button class=\"base-button \">Stop</button> -->\n    </div>\n\n  </div>\n\n</div>\n}\n","import { ApplicationConfig } from '@angular/core';\n\nexport const appConfig: ApplicationConfig = {\n  providers: []\n};\n","import { Tile } from \"./Tile\";\n\nexport interface Container extends Tile {\n    id: string;\n    name: string;\n    state: ContainerState;\n    status:string;\n    image: string;\n    ports: Port[];\n    mounts: Mount[];\n}\n\nexport type Port = {\n    privatePort : number;\n    publicPort: number;\n}\n\nexport type Mount = {\n    source: string;\n    destination:string;\n}\n\nexport enum ContainerState {\n    RUNNING = \"running\",\n    CREATED = \"created\",\n    RESTARTING = \"restarting\",\n    EXITED = \"exited\",\n    PAUSED = \"paused\",\n    DEAD = \"dead\"\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport { ContainerState } from '../models/Container';\n\n@Pipe({\n    name: 'stateToColor',\n    standalone: true\n})\n\nexport class ContainerStateToColorPipe implements PipeTransform {\n    transform(value: ContainerState | undefined): string {\n        if(!value)\n            return \"\";\n        switch (value) {\n            case ContainerState.CREATED:\n            case ContainerState.RUNNING:\n                return \"bg-green-400\";\n            case ContainerState.PAUSED:\n                return \"bg-yellow-400\";\n            case ContainerState.RESTARTING:\n                return \"bg-blue-400\";\n            case ContainerState.DEAD:\n                return \"bg-white\";\n            case ContainerState.EXITED:\n                return \"bg-red-400\";\n        }\n    }\n}","import { bootstrapApplication } from '@angular/platform-browser';\nimport { appConfig } from './app/app.config';\nimport { AppComponent } from './app/app.component';\nimport * as neutralinojs from \"@neutralinojs/lib\";\n\ndeclare global {\n  const Neutralino: typeof neutralinojs\n}\n\nNeutralino.init();\n\nbootstrapApplication(AppComponent, appConfig)\n  .catch((err) => console.error(err));\n"],"names":["DragScrollModule","ContainerStateToColorPipe","i0","ɵɵelementStart","ɵɵlistener","AppComponent_For_4_For_2_Conditional_1_Template_div_click_0_listener","$event","ɵɵrestoreView","_r13","colIndex_r8","ɵɵnextContext","$index","rowIndex_r4","ctx_r11","ɵɵresetView","entitySelected","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵstyleProp","ctx_r10","midTileLayer","icon","ɵɵadvance","ɵɵclassMap","ɵɵpipeBind1","state","ɵɵtextInterpolate1","name","AppComponent_For_4_For_2_Template_div_click_0_listener","_r18","ctx_r17","baseSelected","ɵɵtemplate","AppComponent_For_4_For_2_Conditional_1_Template","ɵɵconditional","ctx_r6","ɵɵrepeaterCreate","AppComponent_For_4_For_2_Template","ɵɵrepeaterTrackByIndex","ɵɵrepeater","row_r3","ɵɵtextInterpolate2","port_r24","privatePort","publicPort","mount_r27","destination","source","AppComponent_Conditional_5_Template_button_click_8_listener","_r31","ctx_r30","dismissModal","AppComponent_Conditional_5_For_20_Template","AppComponent_Conditional_5_ForEmpty_21_Template","AppComponent_Conditional_5_For_25_Template","AppComponent_Conditional_5_ForEmpty_26_Template","ctx_r2","selectedContainer","status","ɵɵproperty","image","ports","mounts","CONTAINER_IMAGE","AppComponent","constructor","ROWS","COLS","baseTileLayer","currentContainerCoords","isCreateContainerModalVisible","ngOnInit","_this","_asyncToGenerator","xIndex","push","yIndex","undefined","Neutralino","events","on","data","Object","values","forEach","coords","ROW","COL","detail","length","createContainersInBoundaries","extensions","dispatch","targetContainerCoords","id","targetContainer","containerCoords","addContainer","row","col","container","entity","getVisibleTiles","mapBoundings","map","nativeElement","getBoundingClientRect","firstVisibleRow","firstVisibleRowIndex","lastVisibleRowIndex","firstVisibleColIndex","lastVisibleColIndex","index","children","rowBoudings","top","bottom","height","tile","tileBoudings","left","right","width","services","result","visibleTileBoundaries","centerRow","Math","floor","centerCol","radius","maxRow","maxCol","minRow","minCol","randomRow","randomCol","value","random","event","rowIndex","colIndex","isContainer","stopPropagation","console","log","_","_2","selectors","viewQuery","AppComponent_Query","rf","ctx","AppComponent_For_4_Template","AppComponent_Conditional_5_Template","i1","DragScrollComponent","styles","appConfig","providers","ContainerState","transform","CREATED","RUNNING","PAUSED","RESTARTING","DEAD","EXITED","pure","standalone","bootstrapApplication","init","catch","err","error"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}